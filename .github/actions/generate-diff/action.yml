name: 'Generate Diff'
description: 'Generate diffs between header files using cheader2json'

inputs:
  pypi-version:
    description: 'The published PyPI version number to use. If not provided, the latest published version will be used. If set to a commit hash or a string such as `main`, the corresponding branch of the cheader2json repository will be used.'
    required: false
    default: 'latest'
  repository:
    description: 'The Git repository to generate the diff for. Format: {owner}/{repo}.'
    required: true
  old-version:
    description: 'The specific old version number to generate the diff for.'
    required: false
  new-version:
    description: 'The specific new version number to generate the diff for.'
    required: false
  version-constraint:
    description: 'A custom version constraint pattern using regular expressions.'
    required: false
  header-paths:
    description: 'A path or regex within the source code checkouts to get the header files that should be converted to JSON.'
    required: true
  working-directory:
    description: 'The working directory for repository clones. If not provided, a default directory outside of the local GitHub Actions repository will be used.'
    required: false
    default: '/tmp/cheader2json-working-directory'

outputs:
  diff-output:
    description: 'The results of the diff for use by other steps in a larger GitHub Actions workflow.'

runs:
  using: 'composite'
  steps:
    - name: Create working directory
      shell: bash
      run: |
        mkdir -p ${{ inputs.working-directory }}

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.pypi-version }}
        path: ${{ inputs.working-directory }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install cheader2json
      shell: bash
      run: |
        if [ "${{ inputs.pypi-version }}" == "latest" ]; then
          pip install cheader2json
        else
          pip install cheader2json==${{ inputs.pypi-version }}
        fi

    - name: Fetch tags
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        git fetch --tags

    - name: Determine versions
      id: determine-versions
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        if [ -z "${{ inputs.old-version }}" ] || [ -z "${{ inputs.new-version }}" ]; then
          tags=$(git tag -l --sort=-v:refname)
          if [ -n "${{ inputs.version-constraint }}" ]; then
            tags=$(echo "$tags" | grep -E "${{ inputs.version-constraint }}")
          fi
          if [ -z "${{ inputs.old-version }}" ]; then
            old_version=$(echo "$tags" | sed -n '2p')
          else
            old_version=${{ inputs.old-version }}
          fi
          if [ -z "${{ inputs.new-version }}" ]; then
            new_version=$(echo "$tags" | sed -n '1p')
          else
            new_version=${{ inputs.new-version }}
          fi
        else
          old_version=${{ inputs.old-version }}
          new_version=${{ inputs.new-version }}
        fi
        echo "old_version=$old_version" >> $GITHUB_ENV
        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: Checkout old version
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        git checkout ${{ env.old_version }}

    - name: Convert old version headers to JSON
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        cheader2json convert ${{ inputs.header-paths }} --prefix=${{ env.old_version }}

    - name: Checkout new version
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        git checkout ${{ env.new_version }}

    - name: Convert new version headers to JSON
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        cheader2json convert ${{ inputs.header-paths }} --prefix=${{ env.new_version }}

    - name: Generate diff
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        cheader2json diff ${{ env.old_version }}.ast.json ${{ env.new_version }}.ast.json > diff-output.txt

    - name: Upload JSON files
      uses: actions/upload-artifact@v4
      with:
        name: json-files
        path: |
          ${{ inputs.working-directory }}/${{ env.old_version }}.ast.json
          ${{ inputs.working-directory }}/${{ env.old_version }}.types.json
          ${{ inputs.working-directory }}/${{ env.new_version }}.ast.json
          ${{ inputs.working-directory }}/${{ env.new_version }}.types.json

    - name: Upload diff results
      uses: actions/upload-artifact@v4
      with:
        name: diff-results
        path: ${{ inputs.working-directory }}/diff-output.txt

    - name: Set diff output
      id: set-diff-output
      shell: bash
      run: echo "diff-output=$(cat ${{ inputs.working-directory }}/diff-output.txt)" >> $GITHUB_OUTPUT
